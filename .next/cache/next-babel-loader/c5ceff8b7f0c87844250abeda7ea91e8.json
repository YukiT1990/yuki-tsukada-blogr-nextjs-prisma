{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yuki.t/Desktop/NextJSPractice/blogr-nextjs-prisma/pages/update-user.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nexport var __N_SSP = true;\n\nvar UpdateUser = function UpdateUser(_ref) {\n  _s();\n\n  var user_id = _ref.user_id,\n      user = _ref.user;\n\n  var _useState = useState(user_id),\n      userId = _useState[0],\n      setUserId = _useState[1];\n\n  var _useState2 = useState(user.email),\n      email = _useState2[0],\n      setEmail = _useState2[1]; // console.log(\"props.userId: \" + props.userId);\n\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"update user \", userId)));\n};\n\n_s(UpdateUser, \"FelJFkMBrCPImRmGlPTybCSd8uQ=\");\n\n_c = UpdateUser;\nexport default UpdateUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateUser\");","map":{"version":3,"sources":["/Users/yuki.t/Desktop/NextJSPractice/blogr-nextjs-prisma/pages/update-user.tsx"],"names":["React","useState","Layout","UpdateUser","user_id","user","userId","setUserId","email","setEmail"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAoDA,IAAMC,UAA2B,GAAG,SAA9BA,UAA8B,OAAuB;AAAA;;AAAA,MAApBC,OAAoB,QAApBA,OAAoB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBAC7BJ,QAAQ,CAACG,OAAD,CADqB;AAAA,MAClDE,MADkD;AAAA,MAC1CC,SAD0C;;AAAA,mBAE/BN,QAAQ,CAACI,IAAI,CAACG,KAAN,CAFuB;AAAA,MAElDA,KAFkD;AAAA,MAE3CC,QAF2C,kBAIzD;;;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBH,MAAhB,CADF,CADF,CADF;AAOD,CAbD;;GAAMH,U;;KAAAA,U;AAeN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Router from \"next/router\";\nimport { useSession, getSession } from \"next-auth/client\";\nimport { GetServerSideProps } from \"next\";\nimport prisma from \"../lib/prisma\";\nimport { Prisma } from \"@prisma/client\";\n\nexport type UserProps = {\n  id: number;\n  name: string | null;\n  email: string | null;\n  posts: {\n    id: number;\n    title: string;\n    content: string;\n  };\n};\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, res }) => {\n  const session = await getSession({ req });\n\n  // console.log(\"session: \" + JSON.stringify(session, null, 2));\n\n  if (!session) {\n    res.statusCode = 403;\n    return { props: { user_id: null } };\n  }\n\n  let token: string;\n  if (typeof session.accessToken == \"string\") {\n    token = session.accessToken;\n  } else {\n    token = \"\";\n  }\n\n  const targetSession = await prisma.session.findUnique({\n    where: { accessToken: token },\n  });\n  // console.log(targetSession.userId);\n  const userId = targetSession.userId;\n\n  const targetUser = await prisma.user.findUnique({\n    where: { id: userId },\n  });\n  return { props: { user_id: userId, user: targetUser } };\n};\n\ntype Props = {\n  user_id: number;\n  user: UserProps[];\n};\n\nconst UpdateUser: React.FC<Props> = ({ user_id, user }) => {\n  const [userId, setUserId] = useState(user_id);\n  const [email, setEmail] = useState(user.email);\n\n  // console.log(\"props.userId: \" + props.userId);\n\n  return (\n    <Layout>\n      <div>\n        <p>update user {userId}</p>\n      </div>\n    </Layout>\n  );\n};\n\nexport default UpdateUser;\n"]},"metadata":{},"sourceType":"module"}