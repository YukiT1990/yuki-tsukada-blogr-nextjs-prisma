{"ast":null,"code":"var _jsxFileName = \"/Users/yuki.t/Desktop/NextJSPractice/blogr-nextjs-prisma/pages/update-user.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { getSession } from \"next-auth/client\";\nimport prisma from \"../lib/prisma\";\nexport const getServerSideProps = async ({\n  req,\n  res\n}) => {\n  const session = await getSession({\n    req\n  }); // console.log(\"session: \" + JSON.stringify(session, null, 2));\n\n  if (!session) {\n    res.statusCode = 403;\n    return {\n      props: {\n        user_id: null\n      }\n    };\n  }\n\n  let token;\n\n  if (typeof session.accessToken == \"string\") {\n    token = session.accessToken;\n  } else {\n    token = \"\";\n  }\n\n  const targetSession = await prisma.session.findUnique({\n    where: {\n      accessToken: token\n    }\n  }); // console.log(targetSession.userId);\n\n  const userId = targetSession.userId;\n  const targetUser = await prisma.user.findUnique({\n    where: {\n      id: userId\n    }\n  });\n  return {\n    props: {\n      user_id: userId,\n      user: targetUser\n    }\n  };\n};\n\nconst UpdateUser = ({\n  user_id,\n  user\n}) => {\n  const {\n    0: userId,\n    1: setUserId\n  } = useState(user_id);\n  const {\n    0: email,\n    1: setEmail\n  } = useState(user);\n  console.log(\"user: \" + user); // console.log(\"props.userId: \" + props.userId);\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"update user \", userId)));\n};\n\nexport default UpdateUser;","map":{"version":3,"sources":["/Users/yuki.t/Desktop/NextJSPractice/blogr-nextjs-prisma/pages/update-user.tsx"],"names":["React","useState","Layout","getSession","prisma","getServerSideProps","req","res","session","statusCode","props","user_id","token","accessToken","targetSession","findUnique","where","userId","targetUser","user","id","UpdateUser","setUserId","email","setEmail","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAAqBC,UAArB,QAAuC,kBAAvC;AAEA,OAAOC,MAAP,MAAmB,eAAnB;AAcA,OAAO,MAAMC,kBAAsC,GAAG,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAAwB;AAC5E,QAAMC,OAAO,GAAG,MAAML,UAAU,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAhC,CAD4E,CAG5E;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZD,IAAAA,GAAG,CAACE,UAAJ,GAAiB,GAAjB;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAT,KAAP;AACD;;AAED,MAAIC,KAAJ;;AACA,MAAI,OAAOJ,OAAO,CAACK,WAAf,IAA8B,QAAlC,EAA4C;AAC1CD,IAAAA,KAAK,GAAGJ,OAAO,CAACK,WAAhB;AACD,GAFD,MAEO;AACLD,IAAAA,KAAK,GAAG,EAAR;AACD;;AAED,QAAME,aAAa,GAAG,MAAMV,MAAM,CAACI,OAAP,CAAeO,UAAf,CAA0B;AACpDC,IAAAA,KAAK,EAAE;AAAEH,MAAAA,WAAW,EAAED;AAAf;AAD6C,GAA1B,CAA5B,CAjB4E,CAoB5E;;AACA,QAAMK,MAAM,GAAGH,aAAa,CAACG,MAA7B;AAEA,QAAMC,UAAU,GAAG,MAAMd,MAAM,CAACe,IAAP,CAAYJ,UAAZ,CAAuB;AAC9CC,IAAAA,KAAK,EAAE;AAAEI,MAAAA,EAAE,EAAEH;AAAN;AADuC,GAAvB,CAAzB;AAGA,SAAO;AAAEP,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEM,MAAX;AAAmBE,MAAAA,IAAI,EAAED;AAAzB;AAAT,GAAP;AACD,CA3BM;;AAkCP,MAAMG,UAA2B,GAAG,CAAC;AAAEV,EAAAA,OAAF;AAAWQ,EAAAA;AAAX,CAAD,KAAuB;AACzD,QAAM;AAAA,OAACF,MAAD;AAAA,OAASK;AAAT,MAAsBrB,QAAQ,CAACU,OAAD,CAApC;AACA,QAAM;AAAA,OAACY,KAAD;AAAA,OAAQC;AAAR,MAAoBvB,QAAQ,CAACkB,IAAD,CAAlC;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAWP,IAAvB,EAJyD,CAMzD;;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBF,MAAhB,CADF,CADF,CADF;AAOD,CAfD;;AAiBA,eAAeI,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Router from \"next/router\";\nimport { useSession, getSession } from \"next-auth/client\";\nimport { GetServerSideProps } from \"next\";\nimport prisma from \"../lib/prisma\";\nimport { Prisma } from \"@prisma/client\";\n\nexport type UserProps = {\n  id: number;\n  name: string | null;\n  email: string | null;\n  posts: {\n    id: number;\n    title: string;\n    content: string;\n  };\n};\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, res }) => {\n  const session = await getSession({ req });\n\n  // console.log(\"session: \" + JSON.stringify(session, null, 2));\n\n  if (!session) {\n    res.statusCode = 403;\n    return { props: { user_id: null } };\n  }\n\n  let token: string;\n  if (typeof session.accessToken == \"string\") {\n    token = session.accessToken;\n  } else {\n    token = \"\";\n  }\n\n  const targetSession = await prisma.session.findUnique({\n    where: { accessToken: token },\n  });\n  // console.log(targetSession.userId);\n  const userId = targetSession.userId;\n\n  const targetUser = await prisma.user.findUnique({\n    where: { id: userId },\n  });\n  return { props: { user_id: userId, user: targetUser } };\n};\n\ntype Props = {\n  user_id: number;\n  user: UserProps[];\n};\n\nconst UpdateUser: React.FC<Props> = ({ user_id, user }) => {\n  const [userId, setUserId] = useState(user_id);\n  const [email, setEmail] = useState(user);\n\n  console.log(\"user: \" + user);\n\n  // console.log(\"props.userId: \" + props.userId);\n\n  return (\n    <Layout>\n      <div>\n        <p>update user {userId}</p>\n      </div>\n    </Layout>\n  );\n};\n\nexport default UpdateUser;\n"]},"metadata":{},"sourceType":"module"}