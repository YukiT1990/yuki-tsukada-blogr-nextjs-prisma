{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yuki.t/Desktop/NextJSPractice/blogr-nextjs-prisma/pages/update-user.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nexport var __N_SSP = true;\n\nvar UpdateUser = function UpdateUser(_ref) {\n  _s();\n\n  var user_id = _ref.user_id,\n      userEmail = _ref.userEmail;\n\n  var _useState = useState(user_id),\n      userId = _useState[0],\n      setUserId = _useState[1];\n\n  var _useState2 = useState(userEmail),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  console.log(\"userEmail: \" + userEmail); // console.log(\"props.userId: \" + props.userId);\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Update email of the user whose id is \", userId, \".\")));\n};\n\n_s(UpdateUser, \"bXI38O72MJ9lLuYdUXAeDaHAJEg=\");\n\n_c = UpdateUser;\nexport default UpdateUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateUser\");","map":{"version":3,"sources":["/Users/yuki.t/Desktop/NextJSPractice/blogr-nextjs-prisma/pages/update-user.tsx"],"names":["React","useState","Layout","UpdateUser","user_id","userEmail","userId","setUserId","email","setEmail","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAqDA,IAAMC,UAA2B,GAAG,SAA9BA,UAA8B,OAA4B;AAAA;;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBAClCJ,QAAQ,CAACG,OAAD,CAD0B;AAAA,MACvDE,MADuD;AAAA,MAC/CC,SAD+C;;AAAA,mBAEpCN,QAAQ,CAACI,SAAD,CAF4B;AAAA,MAEvDG,KAFuD;AAAA,MAEhDC,QAFgD;;AAI9DC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBN,SAA5B,EAJ8D,CAM9D;;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAA0CC,MAA1C,MADF,CADF,CADF;AAOD,CAfD;;GAAMH,U;;KAAAA,U;AAiBN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Router from \"next/router\";\nimport { useSession, getSession } from \"next-auth/client\";\nimport { GetServerSideProps } from \"next\";\nimport prisma from \"../lib/prisma\";\nimport { Prisma } from \"@prisma/client\";\n\nexport type UserProps = {\n  id: number;\n  name: string | null;\n  email: string | null;\n  posts: {\n    id: number;\n    title: string;\n    content: string;\n  };\n};\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, res }) => {\n  const session = await getSession({ req });\n\n  // console.log(\"session: \" + JSON.stringify(session, null, 2));\n\n  if (!session) {\n    res.statusCode = 403;\n    return { props: { user_id: null } };\n  }\n\n  let token: string;\n  if (typeof session.accessToken == \"string\") {\n    token = session.accessToken;\n  } else {\n    token = \"\";\n  }\n\n  const targetSession = await prisma.session.findUnique({\n    where: { accessToken: token },\n  });\n  // console.log(targetSession.userId);\n  const userId = targetSession.userId;\n\n  const targetUser = await prisma.user.findUnique({\n    where: { id: userId },\n  });\n  const userEmail = targetUser.email;\n  return { props: { user_id: userId, userEmail: userEmail } };\n};\n\ntype Props = {\n  user_id: number;\n  userEmail: string | null;\n};\n\nconst UpdateUser: React.FC<Props> = ({ user_id, userEmail }) => {\n  const [userId, setUserId] = useState(user_id);\n  const [email, setEmail] = useState(userEmail);\n\n  console.log(\"userEmail: \" + userEmail);\n\n  // console.log(\"props.userId: \" + props.userId);\n\n  return (\n    <Layout>\n      <div>\n        <h1>Update email of the user whose id is {userId}.</h1>\n      </div>\n    </Layout>\n  );\n};\n\nexport default UpdateUser;\n"]},"metadata":{},"sourceType":"module"}